# Azure DevOps Pipeline for CI/CD Integration

trigger:
  branches:
    include:
      - azure  #branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  # DOCKERHUB_REGISTRY: 'morandan7'
  IMAGE_TAG: $(Build.BuildId) 
  DOCKERFILE_PATH: '$(Build.SourcesDirectory)/docker/Dockerfile'
  BUILD_CONTEXT: '$(Build.SourcesDirectory)/docker'
  # DOCKERHUB_USERNAME: $(DOCKERHUB_USERNAME)
  # DOCKERHUB_PASSWORD: $(DOCKERHUB_PASSWORD)
  DOCKERHUB_CONNECTION: 'moran-dockerhub-connection' # Service Connection with the right credentials
  IMAGE_NAME: 'morandan7/flask-aws-monitor'

stages:
- stage: CloneRepository
  displayName: 'Clone Repository'
  jobs:
  - job: Clone
    steps:
    - checkout: self

- stage: ParallelChecks
  displayName: 'Parallel Linting & Security Checks'
  dependsOn: CloneRepository
  jobs:
  - job: Linting
    displayName: 'Linting'
    steps:
      - script: |
          echo "Flake8 linting tests"
          flake8 docker || true
          displayName: 'Flake8 Linting'
  

    displayName: 'Security Scanning'
    steps:
      - script: |
          echo "Bandit security scan tests"
          bandit -r docker || true
          displayName: 'Bandit Security Scan'
          workingDirectory: '$(Build.SourcesDirectory)'

- stage: RunTests
  displayName: 'Run Unit Tests'
  dependsOn: LintAndSecurityScan
  jobs:
    - job: TestContainer
      steps:
        - script: |
            echo "mocked pytest unit tests"
          displayName: 'Run Mocked Pytest Unit Tests'

- stage: BuildAndPush
  displayName: 'Build and Push Docker Image'
  dependsOn: RunTests
  jobs:
    - job: BuildAndPushImage
      steps:
      - task: Docker@2
        displayName: 'Login'  #login to Dockerhub by using service connection
        inputs:
          command: 'login'
          containerRegistry: '$(DOCKERHUB_CONNECTION)'  
      - task: Docker@2       # Build Docker Image
        displayName: 'Build Docker Image'
        inputs:
          containerRegistry: '$(DOCKERHUB_CONNECTION)'  
          repository: '$(IMAGE_NAME)'  
          command: 'build'
          Dockerfile: '$(DOCKERFILE_PATH)'  
          buildContext: '$(BUILD_CONTEXT)'  
          tags: |
            $(IMAGE_TAG)
            latest

      - task: Docker@2
        displayName: 'Push Docker Image to Docker Hub' #push image to Dockerhub
        inputs:
          containerRegistry: '$(DOCKERHUB_CONNECTION)'  
          repository: '$(IMAGE_NAME)'  
          command: 'push'
          tags: |
            $(IMAGE_TAG)
            latest


- stage: Cleanup
  displayName: 'Cleanup Workspace'
  dependsOn: BuildAndPush  
  condition: always()  # Runs regardless of success/failure
  jobs:
    - job: Cleanup
      steps:
        - script: |
            echo 'Cleaning up workspace'
          displayName: 'Cleanup Files'
          condition: always()