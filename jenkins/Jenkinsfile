pipeline {
    agent {
        docker {
            image 'python:3.10'
            args '-u root' 
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-creds') 
        DOCKER_REGISTRY = 'morandan7'
        REPO_NAME = 'jenkins'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'jenkins', url: 'https://github.com/MoriD12/final.git'
            }
        }

        stage('Install Docker') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y docker.io
                    docker --version
                    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                    chmod +x /usr/local/bin/docker-compose
                    /usr/local/bin/docker-compose --version
                '''
            }
        }

        //not working
        // stage('Install Tools') {
        //     steps {
        //         sh '''
        //             apt-get update
        //             apt-get install -y shellcheck wget
        //             docker pull hadolint/hadolint:latest
        //             pip install flake8 bandit
        //             wget https://github.com/aquasecurity/trivy/releases/download/v0.47.0/trivy_0.47.0_Linux-64bit.deb
        //             dpkg -i trivy_0.47.0_Linux-64bit.deb
        //         '''
        //     }
        // }

        // mock: didnt work
        stage('Lint & Security Scan') {
            parallel {
                stage('Flake8 Linting') {
                    steps {
                        dir('docker') {
                            echo 'Running Flake8 linting tests'
                        }
                    }
                }
                stage('ShellCheck Linting') {
                    steps {
                        echo 'Running ShellCheck linting tests'
                    }
                }
                stage('Hadolint Linting') {
                    steps {
                        dir('docker') {
                            echo 'Running Hadolint Dockerfile linting tests'
                        }
                    }
                }
                stage('Bandit Security Scan') {
                    steps {
                        dir('docker') {
                            echo 'Running Bandit security scan tests'
                        }
                    }
                }
                stage('Trivy Security Scan') {
                    steps {
                        dir('docker') {
                            echo 'Running Trivy security scan on Docker image'
                        }
                    }
                }
            }
        }


        stage('Install Dependencies') {
            steps {
                dir('docker') {  
                    sh 'pip install -r requirements.txt'
                }
            }
        }


        stage('Build Docker Image') {
            steps {
                dir('docker') {  
                    script {
                        sh 'docker build -t ${DOCKER_REGISTRY}/${REPO_NAME}:${IMAGE_TAG} .'
                        sh 'docker tag ${DOCKER_REGISTRY}/${REPO_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${REPO_NAME}:latest'
                    }
                }
            }
        }

        stage('Run Tests in Container') {
            steps {
                dir('docker') {  // Adjusted path
                    sh 'echo "Running pytest tests in container"'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh '''
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    docker push ${DOCKER_REGISTRY}/${REPO_NAME}:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/${REPO_NAME}:latest
                '''
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace'
            deleteDir()
        }
        failure {
            echo 'Pipeline Failed'
        }
        success {
            echo 'Pipeline Succeeded'
        }
    }
}
