pipeline {
    agent {
        docker {
            image 'python:3.9-slim'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-creds')
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        IMAGE_NAME = 'morandan7/flask-aws-monitor'
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'jenkins', url: 'https://github.com/MoranDanino/final_test.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y ca-certificates curl gnupg lsb-release
                    mkdir -p /etc/apt/keyrings
                    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
                    apt-get update
                    apt-get install -y docker-ce-cli
                    pip3 install --upgrade pip
                    pip3 install flake8 bandit
                '''
            }
        }
        stage('Parallel Checks') {
            parallel {
                stage('Linting') {
                    steps {
                        dir('docker') {
                            echo 'Flake8 linting tests'
                            sh 'flake8 . || true'
                        }
                    }
                }
                stage('Security') {
                    steps {
                        dir('docker') {
                            echo 'Bandit security scan tests'
                            sh 'bandit -r . || true'
                        }
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir('docker') {
                    script {
                        sh 'docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .'
                        sh 'docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest'
                    }
                }
            }
        }
        stage('Run Tests in Container') {
            steps {
                dir('docker') {
                    sh 'echo "Running pytest tests in container"'
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                sh '''
                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    docker push ${IMAGE_NAME}:latest
                '''
            }
        }
    }
    post {
        always {
            echo 'Cleaning up workspace'
            deleteDir()
        }
        failure {
            echo 'Pipeline Failed'
        }
        success {
            echo 'Pipeline Succeeded'
        }
    }
}
