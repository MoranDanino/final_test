trigger:
  branches:
    include:
      - azure  # Branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  IMAGE_TAG: $(Build.BuildId)
  DOCKERFILE_PATH: '$(Build.SourcesDirectory)/docker/Dockerfile'
  BUILD_CONTEXT: '$(Build.SourcesDirectory)/docker'
  DOCKERHUB_CONNECTION: 'moran-dockerhub-connection'  # Service Connection with credentials
  IMAGE_NAME: 'morandan7/flask-aws-monitor'

stages:
- stage: CloneRepository
  displayName: 'Clone Repository'
  jobs:
  - job: Clone
    steps:
      - checkout: self

- stage: InstallDependencies
  displayName: 'Install Dependencies'
  dependsOn: CloneRepository
  jobs:
    - job: Install
      steps:
        - script: |
            echo "Installing Python dependencies"
            python -m pip install --upgrade pip
            pip install flake8 bandit
          displayName: 'Install Flake8 & Bandit'

- stage: ParallelChecks
  displayName: 'Parallel Linting & Security Checks'
  dependsOn: InstallDependencies
  jobs:
    - job: Linting
      displayName: 'Linting'
      steps:
        - script: |
            echo "Running Flake8 Linting"
            flake8 docker --count --select=E9,F63,F7,F82 --show-source --statistics
          displayName: 'Flake8 Linting'

    - job: SecurityScan
      displayName: 'Security Scanning'
      steps:
        - script: |
            echo "Running Bandit Security Scan"
            bandit -r docker
          displayName: 'Bandit Security Scan'

- stage: RunTests
  displayName: 'Run Unit Tests'
  dependsOn: ParallelChecks
  jobs:
    - job: TestContainer
      steps:
        - script: |
            echo "Mocked pytest unit tests"
          displayName: 'Run Mocked Pytest Unit Tests'

- stage: BuildAndPush
  displayName: 'Build and Push Docker Image'
  dependsOn: RunTests
  jobs:
    - job: BuildAndPushImage
      steps:
      - task: Docker@2
        displayName: 'Login to Docker Hub'
        inputs:
          command: 'login'
          containerRegistry: '$(DOCKERHUB_CONNECTION)'

      - task: Docker@2
        displayName: 'Build Docker Image'
        inputs:
          containerRegistry: '$(DOCKERHUB_CONNECTION)'
          repository: '$(IMAGE_NAME)'
          command: 'build'
          Dockerfile: '$(DOCKERFILE_PATH)'
          buildContext: '$(BUILD_CONTEXT)'
          tags: |
            $(IMAGE_TAG)
            latest

      - task: Docker@2
        displayName: 'Push Docker Image to Docker Hub'
        inputs:
          containerRegistry: '$(DOCKERHUB_CONNECTION)'
          repository: '$(IMAGE_NAME)'
          command: 'push'
          tags: |
            $(IMAGE_TAG)
            latest

- stage: Cleanup
  displayName: 'Cleanup Workspace'
  dependsOn: BuildAndPush
  condition: always()  # Runs regardless of success/failure
  jobs:
    - job: Cleanup
      steps:
        - script: |
            echo 'Cleaning up workspace'
          displayName: 'Cleanup Files'
          condition: always()
